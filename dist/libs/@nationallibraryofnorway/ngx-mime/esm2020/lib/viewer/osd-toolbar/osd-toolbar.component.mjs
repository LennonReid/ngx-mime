import { animate, group, state, style, transition, trigger, } from '@angular/animations';
import { BreakpointObserver, Breakpoints, } from '@angular/cdk/layout';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Renderer2, ViewChild, } from '@angular/core';
import { Subscription } from 'rxjs';
import { IiifManifestService } from '../../core/iiif-manifest-service/iiif-manifest-service';
import { ViewerOptions } from '../../core/models/viewer-options';
import { ViewingDirection } from '../../core/models/viewing-direction';
import { StyleService } from '../../core/style-service/style.service';
import { CanvasService } from './../../core/canvas-service/canvas-service';
import { MimeViewerIntl } from './../../core/intl';
import { MimeResizeService } from './../../core/mime-resize-service/mime-resize.service';
import { ViewerService } from './../../core/viewer-service/viewer.service';
import * as i0 from "@angular/core";
import * as i1 from "./../../core/intl";
import * as i2 from "@angular/cdk/layout";
import * as i3 from "./../../core/mime-resize-service/mime-resize.service";
import * as i4 from "./../../core/viewer-service/viewer.service";
import * as i5 from "./../../core/canvas-service/canvas-service";
import * as i6 from "../../core/style-service/style.service";
import * as i7 from "../../core/iiif-manifest-service/iiif-manifest-service";
import * as i8 from "@angular/common";
import * as i9 from "@angular/material/button";
import * as i10 from "@angular/material/icon";
import * as i11 from "@angular/material/tooltip";
export class OsdToolbarComponent {
    constructor(intl, renderer, breakpointObserver, changeDetectorRef, mimeService, viewerService, canvasService, styleService, iiifManifestService) {
        this.intl = intl;
        this.renderer = renderer;
        this.breakpointObserver = breakpointObserver;
        this.changeDetectorRef = changeDetectorRef;
        this.mimeService = mimeService;
        this.viewerService = viewerService;
        this.canvasService = canvasService;
        this.styleService = styleService;
        this.iiifManifestService = iiifManifestService;
        this.osdToolbarStyle = {};
        this.numberOfCanvasGroups = 0;
        this.isFirstCanvasGroup = false;
        this.isLastCanvasGroup = false;
        this.state = 'hide';
        this.invert = false;
        this.isWeb = false;
        this.subscriptions = new Subscription();
    }
    get osdToolbarState() {
        return this.state;
    }
    ngOnInit() {
        this.subscriptions.add(this.breakpointObserver
            .observe([Breakpoints.Web])
            .subscribe((value) => (this.isWeb = value.matches)));
        this.subscriptions.add(this.iiifManifestService.currentManifest.subscribe((manifest) => {
            if (manifest) {
                this.invert = manifest.viewingDirection === ViewingDirection.LTR;
                this.changeDetectorRef.detectChanges();
            }
        }));
        this.subscriptions.add(this.mimeService.onResize.subscribe((dimensions) => {
            this.osdToolbarStyle = {
                top: dimensions.top + 110 + 'px',
            };
            this.changeDetectorRef.detectChanges();
        }));
        this.subscriptions.add(this.viewerService.onCanvasGroupIndexChange.subscribe((currentCanvasGroupIndex) => {
            this.numberOfCanvasGroups = this.canvasService.numberOfCanvasGroups;
            this.isFirstCanvasGroup = this.isOnFirstCanvasGroup(currentCanvasGroupIndex);
            this.isLastCanvasGroup = this.isOnLastCanvasGroup(currentCanvasGroupIndex);
            this.changeDetectorRef.detectChanges();
        }));
        this.subscriptions.add(this.intl.changes.subscribe(() => this.changeDetectorRef.markForCheck()));
    }
    ngAfterViewInit() {
        this.subscriptions.add(this.styleService.onChange.subscribe((color) => {
            if (color) {
                const backgroundRgbaColor = this.styleService.convertToRgba(color, 0.3);
                this.renderer.setStyle(this.container.nativeElement, 'background-color', backgroundRgbaColor);
            }
        }));
    }
    zoomIn() {
        this.viewerService.zoomIn();
    }
    zoomOut() {
        this.viewerService.zoomOut();
    }
    home() {
        this.viewerService.home();
    }
    rotate() {
        this.viewerService.rotate();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    goToPreviousCanvasGroup() {
        this.viewerService.goToPreviousCanvasGroup();
    }
    goToNextCanvasGroup() {
        this.viewerService.goToNextCanvasGroup();
    }
    isOnFirstCanvasGroup(currentCanvasGroupIndex) {
        return currentCanvasGroupIndex === 0;
    }
    isOnLastCanvasGroup(currentCanvasGroupIndex) {
        return currentCanvasGroupIndex === this.numberOfCanvasGroups - 1;
    }
}
OsdToolbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OsdToolbarComponent, deps: [{ token: i1.MimeViewerIntl }, { token: i0.Renderer2 }, { token: i2.BreakpointObserver }, { token: i0.ChangeDetectorRef }, { token: i3.MimeResizeService }, { token: i4.ViewerService }, { token: i5.CanvasService }, { token: i6.StyleService }, { token: i7.IiifManifestService }], target: i0.ɵɵFactoryTarget.Component });
OsdToolbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: OsdToolbarComponent, selector: "mime-osd-toolbar", host: { properties: { "@osdToolbarState": "this.osdToolbarState" } }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, static: true }], ngImport: i0, template: "<div #container class=\"osd-toolbar\" [ngStyle]=\"osdToolbarStyle\">\n  <div *ngIf=\"isWeb\" class=\"osd-toolbar-container flex-col\">\n    <div class=\"osd-toolbar-row\">\n      <ng-container *ngIf=\"invert\">\n        <button\n          data-testid=\"navigateBeforeButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.previousPageLabel\"\n          [matTooltip]=\"intl.previousPageLabel\"\n          [disabled]=\"isFirstCanvasGroup\"\n          (click)=\"goToPreviousCanvasGroup()\"\n        >\n          <mat-icon>navigate_before</mat-icon>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"!invert\">\n        <button\n          data-testid=\"navigateNextButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.nextPageLabel\"\n          [matTooltip]=\"intl.nextPageLabel\"\n          [disabled]=\"isLastCanvasGroup\"\n          (click)=\"goToNextCanvasGroup()\"\n        >\n          <mat-icon>navigate_before</mat-icon>\n        </button>\n      </ng-container>\n      <button\n        (click)=\"home()\"\n        data-testid=\"homeButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.homeLabel\"\n        [matTooltip]=\"intl.homeLabel\"\n      >\n        <mat-icon>home</mat-icon>\n      </button>\n      <ng-container *ngIf=\"invert\">\n        <button\n          data-testid=\"navigateNextButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.nextPageLabel\"\n          [matTooltip]=\"intl.nextPageLabel\"\n          [disabled]=\"isLastCanvasGroup\"\n          (click)=\"goToNextCanvasGroup()\"\n        >\n          <mat-icon>navigate_next</mat-icon>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"!invert\">\n        <button\n          data-testid=\"navigateBeforeButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.previousPageLabel\"\n          [matTooltip]=\"intl.previousPageLabel\"\n          [disabled]=\"isFirstCanvasGroup\"\n          (click)=\"goToPreviousCanvasGroup()\"\n        >\n          <mat-icon>navigate_next</mat-icon>\n        </button>\n      </ng-container>\n    </div>\n\n    <div class=\"osd-toolbar-row\">\n      <button\n        (click)=\"zoomIn()\"\n        data-testid=\"zoomInButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.zoomInLabel\"\n        [matTooltip]=\"intl.zoomInLabel\"\n      >\n        <mat-icon>zoom_in</mat-icon>\n      </button>\n\n      <button\n        (click)=\"rotate()\"\n        data-testid=\"rotateButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.rotateCwLabel\"\n        [matTooltip]=\"intl.rotateCwLabel\"\n      >\n        <mat-icon>rotate_right</mat-icon>\n      </button>\n      <button\n        (click)=\"zoomOut()\"\n        data-testid=\"zoomOutButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.zoomOutLabel\"\n        [matTooltip]=\"intl.zoomOutLabel\"\n      >\n        <mat-icon>zoom_out</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [":host{z-index:2}::ng-deep .osd-toolbar-row>.mat-toolbar-row{height:40px}.osd-toolbar{position:absolute;background:transparent;width:auto;border-radius:8px;margin-left:16px}\n"], dependencies: [{ kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i8.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i9.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i10.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i11.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }], animations: [
        trigger('osdToolbarState', [
            state('hide', style({
                transform: 'translate(-120px, 0)',
                display: 'none',
            })),
            state('show', style({
                transform: 'translate(0px, 0px)',
                display: 'block',
            })),
            transition('hide => show', [
                group([
                    style({ display: 'block' }),
                    animate(`${ViewerOptions.transitions.toolbarsEaseInTime}ms ease-out`),
                ]),
            ]),
            transition('show => hide', animate(`${ViewerOptions.transitions.toolbarsEaseOutTime}ms ease-in`)),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OsdToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mime-osd-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('osdToolbarState', [
                            state('hide', style({
                                transform: 'translate(-120px, 0)',
                                display: 'none',
                            })),
                            state('show', style({
                                transform: 'translate(0px, 0px)',
                                display: 'block',
                            })),
                            transition('hide => show', [
                                group([
                                    style({ display: 'block' }),
                                    animate(`${ViewerOptions.transitions.toolbarsEaseInTime}ms ease-out`),
                                ]),
                            ]),
                            transition('show => hide', animate(`${ViewerOptions.transitions.toolbarsEaseOutTime}ms ease-in`)),
                        ]),
                    ], template: "<div #container class=\"osd-toolbar\" [ngStyle]=\"osdToolbarStyle\">\n  <div *ngIf=\"isWeb\" class=\"osd-toolbar-container flex-col\">\n    <div class=\"osd-toolbar-row\">\n      <ng-container *ngIf=\"invert\">\n        <button\n          data-testid=\"navigateBeforeButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.previousPageLabel\"\n          [matTooltip]=\"intl.previousPageLabel\"\n          [disabled]=\"isFirstCanvasGroup\"\n          (click)=\"goToPreviousCanvasGroup()\"\n        >\n          <mat-icon>navigate_before</mat-icon>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"!invert\">\n        <button\n          data-testid=\"navigateNextButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.nextPageLabel\"\n          [matTooltip]=\"intl.nextPageLabel\"\n          [disabled]=\"isLastCanvasGroup\"\n          (click)=\"goToNextCanvasGroup()\"\n        >\n          <mat-icon>navigate_before</mat-icon>\n        </button>\n      </ng-container>\n      <button\n        (click)=\"home()\"\n        data-testid=\"homeButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.homeLabel\"\n        [matTooltip]=\"intl.homeLabel\"\n      >\n        <mat-icon>home</mat-icon>\n      </button>\n      <ng-container *ngIf=\"invert\">\n        <button\n          data-testid=\"navigateNextButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.nextPageLabel\"\n          [matTooltip]=\"intl.nextPageLabel\"\n          [disabled]=\"isLastCanvasGroup\"\n          (click)=\"goToNextCanvasGroup()\"\n        >\n          <mat-icon>navigate_next</mat-icon>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"!invert\">\n        <button\n          data-testid=\"navigateBeforeButton\"\n          mat-icon-button\n          [attr.aria-label]=\"intl.previousPageLabel\"\n          [matTooltip]=\"intl.previousPageLabel\"\n          [disabled]=\"isFirstCanvasGroup\"\n          (click)=\"goToPreviousCanvasGroup()\"\n        >\n          <mat-icon>navigate_next</mat-icon>\n        </button>\n      </ng-container>\n    </div>\n\n    <div class=\"osd-toolbar-row\">\n      <button\n        (click)=\"zoomIn()\"\n        data-testid=\"zoomInButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.zoomInLabel\"\n        [matTooltip]=\"intl.zoomInLabel\"\n      >\n        <mat-icon>zoom_in</mat-icon>\n      </button>\n\n      <button\n        (click)=\"rotate()\"\n        data-testid=\"rotateButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.rotateCwLabel\"\n        [matTooltip]=\"intl.rotateCwLabel\"\n      >\n        <mat-icon>rotate_right</mat-icon>\n      </button>\n      <button\n        (click)=\"zoomOut()\"\n        data-testid=\"zoomOutButton\"\n        mat-icon-button\n        [attr.aria-label]=\"intl.zoomOutLabel\"\n        [matTooltip]=\"intl.zoomOutLabel\"\n      >\n        <mat-icon>zoom_out</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [":host{z-index:2}::ng-deep .osd-toolbar-row>.mat-toolbar-row{height:40px}.osd-toolbar{position:absolute;background:transparent;width:auto;border-radius:8px;margin-left:16px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MimeViewerIntl }, { type: i0.Renderer2 }, { type: i2.BreakpointObserver }, { type: i0.ChangeDetectorRef }, { type: i3.MimeResizeService }, { type: i4.ViewerService }, { type: i5.CanvasService }, { type: i6.StyleService }, { type: i7.IiifManifestService }]; }, propDecorators: { container: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }], osdToolbarState: [{
                type: HostBinding,
                args: ['@osdToolbarState']
            }] } });
//# sourceMappingURL=data:application/json;base64,