import { Rect } from './../models/rect';
import { CanvasGroups } from './../models/canvas-groups';
export class OneCanvasPerCanvasGroupStrategy {
    constructor() {
        this.addAll = (canvasRects) => {
            const canvasGroups = new CanvasGroups();
            canvasGroups.addRange(canvasRects);
            canvasGroups.canvasRects = canvasRects;
            for (let i = 0; i < canvasRects.length; i++) {
                canvasGroups.canvasesPerCanvasGroup.push([i]);
            }
            return canvasGroups;
        };
    }
}
export class TwoCanvasPerCanvasGroupStrategy {
    constructor() {
        this.addAll = (canvasRects) => {
            const canvasGroups = new CanvasGroups();
            // Single first page
            canvasGroups.add(canvasRects[0]);
            canvasGroups.canvasRects = canvasRects;
            canvasGroups.canvasesPerCanvasGroup.push([0]);
            for (let i = 1; i < canvasRects.length; i = i + 2) {
                if (i + 1 < canvasRects.length) {
                    // Paired pages
                    const thisRect = canvasRects[i];
                    const nextRect = canvasRects[i + 1];
                    const groupedRect = new Rect({
                        x: Math.min(thisRect.x, nextRect.x),
                        y: Math.min(thisRect.y, nextRect.y),
                        height: Math.max(thisRect.height, nextRect.height),
                        width: thisRect.width + nextRect.width,
                    });
                    canvasGroups.add(groupedRect);
                    canvasGroups.canvasesPerCanvasGroup.push([i, i + 1]);
                }
                else {
                    // Single last page, if applicable
                    canvasGroups.add(canvasRects[i]);
                    canvasGroups.canvasesPerCanvasGroup.push([i]);
                }
            }
            return canvasGroups;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLWdyb3VwLnN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbWltZS9zcmMvbGliL2NvcmUvY2FudmFzLXNlcnZpY2UvY2FudmFzLWdyb3VwLnN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFNekQsTUFBTSxPQUFPLCtCQUErQjtJQUE1QztRQUdFLFdBQU0sR0FBRyxDQUFDLFdBQW1CLEVBQUUsRUFBRTtZQUMvQixNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ3hDLFlBQVksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbkMsWUFBWSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzNDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9DO1lBQ0QsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUFBO0FBRUQsTUFBTSxPQUFPLCtCQUErQjtJQUE1QztRQUdFLFdBQU0sR0FBRyxDQUFDLFdBQW1CLEVBQUUsRUFBRTtZQUMvQixNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ3hDLG9CQUFvQjtZQUNwQixZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLFlBQVksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRTtvQkFDOUIsZUFBZTtvQkFDZixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3BDLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDO3dCQUMzQixDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQ25DLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDO3dCQUNsRCxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSztxQkFDdkMsQ0FBQyxDQUFDO29CQUNILFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQzlCLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3REO3FCQUFNO29CQUNMLGtDQUFrQztvQkFDbEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQy9DO2FBQ0Y7WUFDRCxPQUFPLFlBQVksQ0FBQztRQUN0QixDQUFDLENBQUM7SUFDSixDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi8uLi9tb2RlbHMvcmVjdCc7XG5pbXBvcnQgeyBDYW52YXNHcm91cHMgfSBmcm9tICcuLy4uL21vZGVscy9jYW52YXMtZ3JvdXBzJztcblxuZXhwb3J0IGludGVyZmFjZSBBYnN0cmFjdENhbnZhc0dyb3VwU3RyYXRlZ3kge1xuICBhZGRBbGwoY2FudmFzUmVjdHM6IFJlY3RbXSk6IENhbnZhc0dyb3Vwcztcbn1cblxuZXhwb3J0IGNsYXNzIE9uZUNhbnZhc1BlckNhbnZhc0dyb3VwU3RyYXRlZ3lcbiAgaW1wbGVtZW50cyBBYnN0cmFjdENhbnZhc0dyb3VwU3RyYXRlZ3lcbntcbiAgYWRkQWxsID0gKGNhbnZhc1JlY3RzOiBSZWN0W10pID0+IHtcbiAgICBjb25zdCBjYW52YXNHcm91cHMgPSBuZXcgQ2FudmFzR3JvdXBzKCk7XG4gICAgY2FudmFzR3JvdXBzLmFkZFJhbmdlKGNhbnZhc1JlY3RzKTtcbiAgICBjYW52YXNHcm91cHMuY2FudmFzUmVjdHMgPSBjYW52YXNSZWN0cztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbnZhc1JlY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjYW52YXNHcm91cHMuY2FudmFzZXNQZXJDYW52YXNHcm91cC5wdXNoKFtpXSk7XG4gICAgfVxuICAgIHJldHVybiBjYW52YXNHcm91cHM7XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBUd29DYW52YXNQZXJDYW52YXNHcm91cFN0cmF0ZWd5XG4gIGltcGxlbWVudHMgQWJzdHJhY3RDYW52YXNHcm91cFN0cmF0ZWd5XG57XG4gIGFkZEFsbCA9IChjYW52YXNSZWN0czogUmVjdFtdKSA9PiB7XG4gICAgY29uc3QgY2FudmFzR3JvdXBzID0gbmV3IENhbnZhc0dyb3VwcygpO1xuICAgIC8vIFNpbmdsZSBmaXJzdCBwYWdlXG4gICAgY2FudmFzR3JvdXBzLmFkZChjYW52YXNSZWN0c1swXSk7XG4gICAgY2FudmFzR3JvdXBzLmNhbnZhc1JlY3RzID0gY2FudmFzUmVjdHM7XG4gICAgY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAucHVzaChbMF0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjYW52YXNSZWN0cy5sZW5ndGg7IGkgPSBpICsgMikge1xuICAgICAgaWYgKGkgKyAxIDwgY2FudmFzUmVjdHMubGVuZ3RoKSB7XG4gICAgICAgIC8vIFBhaXJlZCBwYWdlc1xuICAgICAgICBjb25zdCB0aGlzUmVjdCA9IGNhbnZhc1JlY3RzW2ldO1xuICAgICAgICBjb25zdCBuZXh0UmVjdCA9IGNhbnZhc1JlY3RzW2kgKyAxXTtcbiAgICAgICAgY29uc3QgZ3JvdXBlZFJlY3QgPSBuZXcgUmVjdCh7XG4gICAgICAgICAgeDogTWF0aC5taW4odGhpc1JlY3QueCwgbmV4dFJlY3QueCksXG4gICAgICAgICAgeTogTWF0aC5taW4odGhpc1JlY3QueSwgbmV4dFJlY3QueSksXG4gICAgICAgICAgaGVpZ2h0OiBNYXRoLm1heCh0aGlzUmVjdC5oZWlnaHQsIG5leHRSZWN0LmhlaWdodCksXG4gICAgICAgICAgd2lkdGg6IHRoaXNSZWN0LndpZHRoICsgbmV4dFJlY3Qud2lkdGgsXG4gICAgICAgIH0pO1xuICAgICAgICBjYW52YXNHcm91cHMuYWRkKGdyb3VwZWRSZWN0KTtcbiAgICAgICAgY2FudmFzR3JvdXBzLmNhbnZhc2VzUGVyQ2FudmFzR3JvdXAucHVzaChbaSwgaSArIDFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNpbmdsZSBsYXN0IHBhZ2UsIGlmIGFwcGxpY2FibGVcbiAgICAgICAgY2FudmFzR3JvdXBzLmFkZChjYW52YXNSZWN0c1tpXSk7XG4gICAgICAgIGNhbnZhc0dyb3Vwcy5jYW52YXNlc1BlckNhbnZhc0dyb3VwLnB1c2goW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhc0dyb3VwcztcbiAgfTtcbn1cbiJdfQ==