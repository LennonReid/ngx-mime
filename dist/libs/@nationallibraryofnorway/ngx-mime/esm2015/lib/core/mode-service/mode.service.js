import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { ModeChanges } from '../models/modeChanges';
import { ViewerMode } from '../models/viewer-mode';
export class ModeService {
    constructor() {
        this.toggleModeSubject = new ReplaySubject();
        this.modeChanges = new ModeChanges();
    }
    get onChange() {
        return this.toggleModeSubject.asObservable().pipe(distinctUntilChanged());
    }
    set mode(mode) {
        this._mode = mode;
        this.change();
    }
    get mode() {
        return this._mode;
    }
    set initialMode(mode) {
        this._initialMode = mode;
        this.mode = mode;
    }
    get initialMode() {
        return this._initialMode;
    }
    toggleMode() {
        if (this.mode === ViewerMode.DASHBOARD) {
            this.mode = ViewerMode.PAGE;
        }
        else if (this.mode === ViewerMode.PAGE ||
            this.mode === ViewerMode.PAGE_ZOOMED) {
            this.mode = ViewerMode.DASHBOARD;
        }
    }
    change() {
        this.modeChanges.previousValue = this.modeChanges.currentValue;
        this.modeChanges.currentValue = this._mode;
        this.toggleModeSubject.next(Object.assign({}, this.modeChanges));
    }
}
ModeService.decorators = [
    { type: Injectable }
];
ModeService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LW1pbWUvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvcmUvbW9kZS1zZXJ2aWNlL21vZGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUduRCxNQUFNLE9BQU8sV0FBVztJQU10QjtRQUhRLHNCQUFpQixHQUErQixJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ3BFLGdCQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUV6QixDQUFDO0lBRWhCLElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLElBQWdCO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLFdBQVcsQ0FBQyxJQUFnQjtRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxTQUFTLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1NBQzdCO2FBQU0sSUFDTCxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJO1lBQzdCLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLFdBQVcsRUFDcEM7WUFDQSxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1FBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDM0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksbUJBQ3RCLElBQUksQ0FBQyxXQUFXLEVBQ25CLENBQUM7SUFDTCxDQUFDOzs7WUFoREYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTW9kZUNoYW5nZXMgfSBmcm9tICcuLi9tb2RlbHMvbW9kZUNoYW5nZXMnO1xuaW1wb3J0IHsgVmlld2VyTW9kZSB9IGZyb20gJy4uL21vZGVscy92aWV3ZXItbW9kZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RlU2VydmljZSB7XG4gIHByaXZhdGUgX2luaXRpYWxNb2RlOiBWaWV3ZXJNb2RlO1xuICBwcml2YXRlIF9tb2RlOiBWaWV3ZXJNb2RlO1xuICBwcml2YXRlIHRvZ2dsZU1vZGVTdWJqZWN0OiBSZXBsYXlTdWJqZWN0PE1vZGVDaGFuZ2VzPiA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XG4gIHByaXZhdGUgbW9kZUNoYW5nZXMgPSBuZXcgTW9kZUNoYW5nZXMoKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgZ2V0IG9uQ2hhbmdlKCk6IE9ic2VydmFibGU8TW9kZUNoYW5nZXM+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVNb2RlU3ViamVjdC5hc09ic2VydmFibGUoKS5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgc2V0IG1vZGUobW9kZTogVmlld2VyTW9kZSkge1xuICAgIHRoaXMuX21vZGUgPSBtb2RlO1xuICAgIHRoaXMuY2hhbmdlKCk7XG4gIH1cblxuICBnZXQgbW9kZSgpOiBWaWV3ZXJNb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZTtcbiAgfVxuXG4gIHNldCBpbml0aWFsTW9kZShtb2RlOiBWaWV3ZXJNb2RlKSB7XG4gICAgdGhpcy5faW5pdGlhbE1vZGUgPSBtb2RlO1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gIH1cblxuICBnZXQgaW5pdGlhbE1vZGUoKTogVmlld2VyTW9kZSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxNb2RlO1xuICB9XG5cbiAgdG9nZ2xlTW9kZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb2RlID09PSBWaWV3ZXJNb2RlLkRBU0hCT0FSRCkge1xuICAgICAgdGhpcy5tb2RlID0gVmlld2VyTW9kZS5QQUdFO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLm1vZGUgPT09IFZpZXdlck1vZGUuUEFHRSB8fFxuICAgICAgdGhpcy5tb2RlID09PSBWaWV3ZXJNb2RlLlBBR0VfWk9PTUVEXG4gICAgKSB7XG4gICAgICB0aGlzLm1vZGUgPSBWaWV3ZXJNb2RlLkRBU0hCT0FSRDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoYW5nZSgpIHtcbiAgICB0aGlzLm1vZGVDaGFuZ2VzLnByZXZpb3VzVmFsdWUgPSB0aGlzLm1vZGVDaGFuZ2VzLmN1cnJlbnRWYWx1ZTtcbiAgICB0aGlzLm1vZGVDaGFuZ2VzLmN1cnJlbnRWYWx1ZSA9IHRoaXMuX21vZGU7XG4gICAgdGhpcy50b2dnbGVNb2RlU3ViamVjdC5uZXh0KHtcbiAgICAgIC4uLnRoaXMubW9kZUNoYW5nZXNcbiAgICB9KTtcbiAgfVxufVxuIl19